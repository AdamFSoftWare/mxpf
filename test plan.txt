TEST GENERAL
  Test DebugMessage
  Test DebugList
  Test SaveDebugMessages
  Test FailureMessage
  Test SaveFailureMessages
  Test InitializeMXPF
  Test DefaultOptionsMXPF
  Test FinalizeMXPF

TEST PATCH FILE SELECTION
  Test PatchFileByAuthor
  - InitializeMXPF not called
    -> Verify mxPatchFile not assigned
  - File exists
    -> Verify mxPatchFile
    -> Verify mxPatchFile's author
  - File does not exist
    -> Verify mxPatchFile is unassigned
  - Multiple files
    -> Should choose one highest in the user's load order
  
  Test PatchFileByName
  - InitializeMXPF not called
    -> Verify mxPatchFile not assigned
  - File exists
    -> Verify mxPatchFile
  
TEST FILE SELECTION
  Test SetExclusions
  - InitializeMXPF not called
    -> Verify mxFileMode = 0
  - InitializeMXPF called
    -> Verify mxFileMode = 1
    -> Verify mxFiles = our files
    
  Test SetInclusions
  - InitializeMXPF not called
    -> Verify mxFileMode = 0
  -> InitializeMXPF called
    -> Verify mxFileMode = 2
    -> Verify mxFiles = our files
  
TEST RECORD PROCESSING
  Test LoadRecords
  - InitializeMXPF not called
    -> Verify it doesn't cause an exception
  - mxPatchFile not assigned
    -> Verify it doesn't cause an exception
  - mxPatchFile assigned
    -> Verify mxMasters.Text
    -> Verify mxRecords.Count
  - Verify exclusion mode works
    -> Verify mxMasters.Text
    -> Verify mxRecords.Count
  - Verify inclusion mode works
    -> Verify mxMasters.Text
    -> Verify mxRecords.Count
  - Test mxLoadMasterRecords
    -> Verify mxRecords.Count
  - Test mxLoadOverrideRecords
    -> Verify mxRecords.Count
  - Test mxLoadWinningOverrides
    -> Verify mxRecords.Count

  Test LoadChildRecords
  - InitializeMXPF not called
    -> Verify it doesn't cause an exception
  - mxPatchFile not assigned
    -> Verify it doesn't cause an exception
  - mxPatchFile assigned
    -> Verify mxMasters.Text
    -> Verify mxRecords.Count
  - Verify exclusion mode works
    -> Verify mxMasters.Text
    -> Verify mxRecords.Count
  - Verify inclusion mode works
    -> Verify mxMasters.Text
    -> Verify mxRecords.Count
  - Test mxLoadMasterRecords
    -> Verify mxRecords.Count
  - Test mxLoadOverrideRecords
    -> Verify mxRecords.Count
  - Test mxLoadWinningOverrides
    -> Verify mxRecords.Count

  Test MaxRecordIndex
  - InitializeMXPF not called
    -> Verify it returns -1
  - InitializeMXPF called
    -> Verify it returns mxRecords.Count - 1

  Test GetRecord
  - InitializeMXPF not called
    -> Verify it returns nil
  - LoadRecords not called
    -> Verify it returns nil
  - No records
    -> Verify it returns nil
  - Invalid index
    -> Verify it throws an exception
  - Valid index
    -> Verify it returns the correct record

  Test RemoveRecord
  - InitializeMXPF not called
    -> Verify it throws an exception
  - LoadRecords not called
    -> Verify it throws an exception
  - mxRecords.Count = 0
    -> Verify it throws an exception
  - Invalid index
    -> Verify it throws an exception
  - Valid index
    -> Verify it removes the record from mxRecords

TEST RECORD PATCHING
  Test AddMastersToPatch
  - InitializeMXPF not called
    -> Verify it throws an exception
    -> Verify mxMastersAdded is false
  - LoadRecords not called
    -> Verify it throws an exception
    -> Verify mxMastersAdded is false
  - mxPatchfile not assigned
    -> Verify it throws an exception
    -> Verify mxMastersAdded is false
  - mxPatchfile assigned
    -> Verify mxMastersAdded is true
    -> Verify the patch file has the new masters

  Test CopyRecordToPatch
  - InitializeMXPF not called
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - LoadRecords not called
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - mxPatchFile not assigned
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - No records
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - Invalid index
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - Valid index
    -> Verify mxCopyCalled is true
    -> Verify mxMastersAdded is true
    -> Verify the record is added to mxPatchRecords
    -> Verify the record is present in the patch file
  - mxSkipPatchedRecords
    -> Verify mxCopyCalled is false
    -> Verify mxMastersAdded is false
    -> Verify the record isn't added to mxPatchRecords
    -> Verify the record isn't present in the patch file

  Test CopyRecordsToPatch
  - InitializeMXPF not called
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - LoadRecords not called
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - mxPatchFile not assigned
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - No records
    -> Verify it throws an exception
    -> Verify mxCopyCalled is false
  - mxSkipPatchedRecords
    -> Verify mxCopyCalled is true
    -> Verify mxMastersAdded is true
    -> Verify mxPatchRecords.Count
    -> Verify records are in patch file
  - mxCopyWinningOverrides
    -> Verify the record copied is the winning override
    -> Verify when winning override is in a file not in the file selection

  Test MaxPatchRecordIndex
  - InitializeMXPF not called
    -> Verify it raises an exception
  - InitializeMXPF called
    -> Verify it returns mxPatchRecords.Count - 1

  Test GetPatchRecord
  - InitializeMXPF not called
    -> Verify it returns nil
  - No records copied
    -> Verify it returns nil
  - No records
    -> Verify it returns nil
  - Invalid index
    -> Verify it throws an exception
  - Valid index
    -> Verify it returns the correct record